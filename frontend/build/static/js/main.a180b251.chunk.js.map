{"version":3,"sources":["constants/pageConstants.js","constants/userConstants.js","store.js","reducers/pageReducers.js","reducers/userReducers.js","components/Header.js","actions/userActions.js","components/Message.js","components/Loader.js","screens/HomeScreen.js","actions/pageActions.js","components/Page.js","screens/PagesScreen.js","screens/NewPageScreen.js","screens/PageScreen.js","screens/ProfileScreen.js","App.js","reportWebVitals.js","index.js"],"names":["PAGE_LIST_REQUEST","PAGE_LIST_SUCCESS","PAGE_LIST_FAIL","PAGE_DETAILS_REQUEST","PAGE_DETAILS_SUCCESS","PAGE_DETAILS_FAIL","PAGE_CREATE_REQUEST","PAGE_CREATE_SUCCESS","PAGE_CREATE_FAIL","PAGE_DELETE_REQUEST","PAGE_DELETE_SUCCESS","PAGE_DELETE_FAIL","PAGE_UPDATE_REQUEST","PAGE_UPDATE_SUCCESS","PAGE_UPDATE_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","reducer","combineReducers","pageList","state","pages","action","type","loading","payload","error","pageDetails","page","files","userLogin","userInfo","userRegister","userDetails","user","userUpdateProfile","success","pageCreate","pageDelete","pageUpdate","initialState","localStorage","getItem","JSON","parse","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Header","dispatch","useDispatch","useState","searchInput","setSearchInput","useSelector","Navbar","bg","expand","collapseOnSelect","Container","to","Brand","Toggle","aria-controls","Collapse","id","className","Nav","NavDropdown","title","userName","Item","onClick","removeItem","Link","Form","FormControl","placeholder","aria-label","value","onChange","e","target","Button","variant","Message","children","Alert","defaultProps","Loader","color","css","width","height","margin","history","hasAnAcount","setHasAnAcount","setUserName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setValMessage","setMessage","setTimeout","useEffect","push","Group","Check","label","checked","Card","Row","as","Col","controlId","Label","Control","preventDefault","a","config","headers","axios","post","data","setItem","stringify","response","login","OverlayTrigger","overlay","Tooltip","class","register","deletePage","getState","token","Authorization","delete","getFileName","fileLoc","i","split","reverse","length","join","Page","_id","style","display","gridTemplateRows","gridTemplateAreas","columnGap","rowGap","cursor","Title","gridArea","name","text","Text","map","file","href","download","PagesScreen","match","params","get","dataFromBackend","NewPageButton","size","sm","md","lg","xl","NewPageScreen","setName","setText","setFiles","publicViewing","setPublicViewing","isOneFactorAuthReqForViewing","setIsOneFactorAuthReqForViewing","publicEditing","setPublicEditing","publicEditingModalShown","setPublicEditingModalShown","publicViewingModalShown","setPublicViewingModalShown","PublicEditingModalCancel","PublicViewingModalCancel","PublicEditingModal","Modal","show","onHide","centered","Body","Footer","PublicViewingModal","required","multiple","Switch","disabled","go","EditPageScreen","isEditing","setIsEditing","submitHandler","newPage","console","log","put","updatePage","toggleIsEditing","deleteHandler","gridTemplateColumns","alignItems","justifyContent","alignContent","textAlign","resize","ProfileScreen","getUserDetails","readOnly","updateUserProfile","App","path","component","HomeScreen","exact","PageScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a180b251.chunk.js","sourcesContent":["export const PAGE_LIST_REQUEST = 'PAGE_LIST_REQUEST'\r\nexport const PAGE_LIST_SUCCESS = 'PAGE_LIST_SUCCESS'\r\nexport const PAGE_LIST_FAIL = 'PAGE_LIST_FAIL'\r\n\r\nexport const PAGE_DETAILS_REQUEST = 'PAGE_DETAILS_REQUEST'\r\nexport const PAGE_DETAILS_SUCCESS = 'PAGE_DETAILS_SUCCESS'\r\nexport const PAGE_DETAILS_FAIL = 'PAGE_DETAILS_FAIL'\r\n\r\nexport const PAGE_CREATE_REQUEST = 'PAGE_CREATE_REQUEST'\r\nexport const PAGE_CREATE_SUCCESS = 'PAGE_CREATE_SUCCESS'\r\nexport const PAGE_CREATE_FAIL = 'PAGE_CREATE_FAIL'\r\n\r\nexport const PAGE_DELETE_REQUEST = 'PAGE_DELETE_REQUEST'\r\nexport const PAGE_DELETE_SUCCESS = 'PAGE_DELETE_SUCCESS'\r\nexport const PAGE_DELETE_FAIL = 'PAGE_DELETE_FAIL'\r\n\r\nexport const PAGE_UPDATE_REQUEST = 'PAGE_UPDATE_REQUEST'\r\nexport const PAGE_UPDATE_SUCCESS = 'PAGE_UPDATE_SUCCESS'\r\nexport const PAGE_UPDATE_FAIL = 'PAGE_UPDATE_FAIL'","export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST'\r\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\r\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL'\r\nexport const USER_LOGOUT = 'USER_LOGOUT'\r\n\r\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST'\r\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS'\r\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL'\r\n\r\nexport const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST'\r\nexport const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS'\r\nexport const USER_DETAILS_FAIL = 'USER_DETAILS_FAIL'\r\n\r\nexport const USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST'\r\nexport const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS'\r\nexport const USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL'\r\nexport const USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET'","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { pageListReducer, pageDetailsReducer, pageCreateReducer, pageDeleteReducer, pageUpdateReducer } from './reducers/pageReducers'\r\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducers'\r\n\r\nconst reducer = combineReducers({\r\n    pageList: pageListReducer,\r\n    pageDetails: pageDetailsReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    pageCreate: pageCreateReducer,\r\n    pageDelete: pageDeleteReducer,\r\n    pageUpdate: pageUpdateReducer,\r\n})\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\nconst initialState = {\r\n    userLogin: { userInfo: userInfoFromStorage}\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store","import { \r\n    PAGE_LIST_REQUEST, \r\n    PAGE_LIST_SUCCESS, \r\n    PAGE_LIST_FAIL,\r\n    PAGE_DETAILS_REQUEST, \r\n    PAGE_DETAILS_SUCCESS, \r\n    PAGE_DETAILS_FAIL, \r\n    PAGE_CREATE_REQUEST, \r\n    PAGE_CREATE_SUCCESS, \r\n    PAGE_CREATE_FAIL, \r\n    PAGE_DELETE_REQUEST, \r\n    PAGE_DELETE_SUCCESS, \r\n    PAGE_DELETE_FAIL, \r\n    PAGE_UPDATE_REQUEST, \r\n    PAGE_UPDATE_SUCCESS, \r\n    PAGE_UPDATE_FAIL,\r\n} from '../constants/pageConstants'\r\n\r\nexport const pageListReducer = (state = { pages: [] }, action) => {\r\n    switch (action.type) {\r\n        case PAGE_LIST_REQUEST:\r\n            return { loading: true, pages: [] }\r\n        case PAGE_LIST_SUCCESS:\r\n            return { loading: false, pages: action.payload }\r\n        case PAGE_LIST_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const pageDetailsReducer = (state = { page: { files: [] } }, action) => {\r\n    switch (action.type) {\r\n        case PAGE_DETAILS_REQUEST:\r\n            return { loading: true, ...state  }\r\n        case PAGE_DETAILS_SUCCESS:\r\n            return { loading: false, page: action.payload }\r\n        case PAGE_DETAILS_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const pageCreateReducer = (state = { page: { files: [] } }, action) => {\r\n    switch (action.type) {\r\n        case PAGE_CREATE_REQUEST:\r\n            return { loading: true, ...state  }\r\n        case PAGE_CREATE_SUCCESS:\r\n            return { loading: false, page: action.payload }\r\n        case PAGE_CREATE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const pageDeleteReducer = (state = {  }, action) => {\r\n    switch (action.type) {\r\n        case PAGE_DELETE_REQUEST:\r\n            return { loading: true, ...state  }\r\n        case PAGE_DELETE_SUCCESS:\r\n            return { loading: false }\r\n        case PAGE_DELETE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const pageUpdateReducer = (state = { page: { files: [] } }, action) => {\r\n    switch (action.type) {\r\n        case PAGE_UPDATE_REQUEST:\r\n            return { loading: true, ...state  }\r\n        case PAGE_UPDATE_SUCCESS:\r\n            return { loading: false, page: action.payload }\r\n        case PAGE_UPDATE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}","import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL } from '../constants/userConstants'\r\n\r\nexport const userLoginReducer = (state = {  }, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n            return { loading: true }\r\n        case USER_LOGIN_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n        case USER_LOGIN_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        case USER_LOGOUT:\r\n            return {  }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userRegisterReducer = (state = {  }, action) => {\r\n    switch (action.type) {\r\n        case USER_REGISTER_REQUEST:\r\n            return { loading: true }\r\n        case USER_REGISTER_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n        case USER_REGISTER_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n    switch (action.type) {\r\n        case USER_DETAILS_REQUEST:\r\n            return { ...state, loading: true }\r\n        case USER_DETAILS_SUCCESS:\r\n            return { loading: false, user: action.payload }\r\n        case USER_DETAILS_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const userUpdateProfileReducer = (state = { }, action) => {\r\n    switch (action.type) {\r\n        case USER_UPDATE_PROFILE_REQUEST:\r\n            return { ...state, success: false, error: null, loading: true }\r\n        case USER_UPDATE_PROFILE_SUCCESS:\r\n            return { loading: false, success: true, userInfo: action.payload }\r\n        case USER_UPDATE_PROFILE_FAIL:\r\n            return { loading: false, success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Navbar, Nav, Container, Form, Button, FormControl, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { logout } from '../actions/userActions'\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchInput, setSearchInput] = useState('')\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <header>\r\n            <Navbar bg=\"light\" expand=\"lg\" collapseOnSelect>\r\n                <Container>\r\n                    <LinkContainer to='/'>\r\n                            <Navbar.Brand >oKeeper</Navbar.Brand>\r\n                    </LinkContainer>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\r\n                        <Nav className=\"ml-auto\">\r\n                            {userInfo ? (\r\n                                <NavDropdown title={userInfo.userName} id='userName'>\r\n                                    <LinkContainer to={`/${userInfo.userName}`}>\r\n                                        <NavDropdown.Item>Pages</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n                                    <LinkContainer to={`/${userInfo.userName}/profile`}>\r\n                                        <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n                                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                                </NavDropdown>\r\n                            ) : (\r\n                                <LinkContainer to='/'>\r\n                                    <Nav.Link><i className='fas fa-user'></i> Sign In</Nav.Link>\r\n                                </LinkContainer>\r\n                            )}\r\n                            <Nav.Item className='mx-3'>\r\n                                <Form className=\"d-flex\">\r\n                                    <FormControl\r\n                                    type=\"search\"\r\n                                    placeholder=\"Search a user...\"\r\n                                    className=\"mr-2\"\r\n                                    aria-label=\"Search\"\r\n                                    value={searchInput}\r\n                                    onChange={e => setSearchInput(e.target.value)}\r\n                                    />\r\n                                    <Button variant=\"outline-dark\" className='mx-1'>Search</Button>\r\n                                </Form>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import axios from 'axios'\r\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\"\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/user/login', { email, password}, config)\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (err) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({\r\n        type: USER_LOGOUT\r\n    })\r\n}\r\n\r\nexport const register = (userName, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/user/', { userName, email, password}, config)\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (err) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUserDetails = (userName, id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        console.log(userInfo)\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(`/${userName}/api/user/${id}`, config)\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (userName, user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(`/${userName}/api/user/profile`, user, config)\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nconst Message = ({ variant, children}) => {\r\n    return (\r\n        <Alert variant={variant}>\r\n            {children}\r\n        </Alert>\r\n    )\r\n}\r\n\r\nMessage.defaultProps = {\r\n    variant: 'info'\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport { PuffLoader } from 'react-spinners'\r\nconst Loader = () => {\r\n    return (\r\n        <PuffLoader color=\"#36D7B7\" css={{\r\n            width: '100px',\r\n            height: '100px',\r\n            margin: '50%'\r\n        }} />\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Form, Button, Row, Col, Container, FormControl, Card, OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { login, register } from '../actions/userActions'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\n\r\nexport default ({ history }) => {\r\n    const [hasAnAcount, setHasAnAcount] = useState(true)\r\n    const [userName, setUserName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setValMessage] = useState(null)\r\n\r\n    const setMessage = (message) => {\r\n        setValMessage(message)\r\n        setTimeout(() => {\r\n            setValMessage(null)\r\n        }, 5000);\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const userRegister = useSelector(state => state.userRegister)\r\n\r\n    const { loading, error, userInfo } = userRegister.userInfo ? userRegister : userLogin\r\n\r\n    useEffect(() => {\r\n        if(userInfo && userInfo.userName) {\r\n            history.push(`/${userInfo.userName}`)\r\n        }\r\n    }, [history, userInfo])\r\n\r\n    const submitLoginHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        setMessage(null)\r\n        dispatch(login(email, password))\r\n    }\r\n    \r\n    const submitRegisterHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (!userName) {\r\n            setMessage('User Name is required')\r\n        } else if (!email) {\r\n            setMessage('Email is required')\r\n        } else if (!password || !confirmPassword) {\r\n            setMessage('Password is required')\r\n        } else if (password !== confirmPassword) {\r\n            setMessage('passwords do not match')\r\n        } else {\r\n            setMessage(null)\r\n            dispatch(register(userName, email, password))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Welcome to oKeeper!</h1>\r\n            <p>The place to keep and share your stuff! notes, files, assays and more!</p>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Check \r\n                        type='checkbox'\r\n                        label='Have an acount?'\r\n                        checked={hasAnAcount}\r\n                        onChange={() => setHasAnAcount(!hasAnAcount)}\r\n                    />\r\n                </Form.Group>\r\n            </Form>\r\n            <Card className='p-3 m-0 mt-3'>\r\n                {hasAnAcount ?\r\n                    <Form>\r\n                        <Row className=\"mb-3\">\r\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"email\" \r\n                                    placeholder=\"Enter email\"\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                    value={email}\r\n                                    as={FormControl}\r\n                                />\r\n                            </Form.Group>\r\n                        \r\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\" \r\n                                    placeholder=\"Enter password\"\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                    value={password}\r\n                                />\r\n                            </Form.Group>\r\n                        </Row>\r\n                        \r\n                        <Row>\r\n                            <Container>\r\n                                <Button \r\n                                    variant=\"outline-dark\" \r\n                                    type=\"submit\"\r\n                                    onClick={submitLoginHandler}\r\n                                >\r\n                                    Submit\r\n                                </Button>\r\n                            </Container>\r\n                        </Row>\r\n                    </Form>\r\n                :\r\n                    <Form>\r\n                        <Row className=\"mb-3\">\r\n                            <Form.Group as={Col} controlId=\"formGridUserName\">\r\n                                <Form.Label>\r\n                                    User Name: \r\n                                    <OverlayTrigger overlay={\r\n                                        <Tooltip>\r\n                                            After creating your user you will not be able to change your user name.\r\n                                        </Tooltip>\r\n                                    }>\r\n                                        <i class=\"far fa-question-circle mx-1\"></i>\r\n                                    </OverlayTrigger>\r\n                                </Form.Label>\r\n                                <Form.Control \r\n                                    type=\"text\" \r\n                                    placeholder=\"Enter user name:\"\r\n                                    onChange={(e) => setUserName(e.target.value)}\r\n                                    value={userName}\r\n                                    as={FormControl}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"email\" \r\n                                    placeholder=\"Enter email\"\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                    value={email}\r\n                                    as={FormControl}\r\n                                />\r\n                            </Form.Group>\r\n                        </Row>\r\n\r\n                        \r\n                        <Row className=\"mb-3\">        \r\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\" \r\n                                    placeholder=\"Enter password\"\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                    value={password}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\r\n                                <Form.Label>Confirm Password:</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\" \r\n                                    placeholder=\"Confirm password\"\r\n                                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                    value={confirmPassword}\r\n                                />\r\n                            </Form.Group>\r\n                        </Row>\r\n                        \r\n                        <Button \r\n                            variant=\"outline-dark\" \r\n                            type=\"submit\"\r\n                            onClick={submitRegisterHandler}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                }\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nimport { \r\n    PAGE_LIST_REQUEST, \r\n    PAGE_LIST_SUCCESS, \r\n    PAGE_LIST_FAIL, \r\n    PAGE_DETAILS_REQUEST, \r\n    PAGE_DETAILS_SUCCESS, \r\n    PAGE_DETAILS_FAIL, \r\n    PAGE_CREATE_SUCCESS, \r\n    PAGE_CREATE_REQUEST, \r\n    PAGE_CREATE_FAIL, \r\n    PAGE_DELETE_SUCCESS, \r\n    PAGE_DELETE_FAIL, \r\n    PAGE_DELETE_REQUEST, \r\n    PAGE_UPDATE_REQUEST,\r\n    PAGE_UPDATE_SUCCESS,\r\n    PAGE_UPDATE_FAIL\r\n} from '../constants/pageConstants'\r\n\r\n\r\nexport const listPages = (userName) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: PAGE_LIST_REQUEST })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        let dataFromBackend\r\n\r\n        if (userInfo && userInfo.token) {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${userInfo.token}`\r\n                }\r\n            }\r\n\r\n            dataFromBackend = await axios.get(`/${userName}/api/pages/all`, config)\r\n        } else {\r\n            dataFromBackend = await axios.get(`/${userName}/api/pages`)\r\n        }\r\n\r\n        const { data } = dataFromBackend\r\n\r\n        dispatch({\r\n            type: PAGE_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PAGE_LIST_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listPageDetails = (userName, id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: PAGE_DETAILS_REQUEST })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        let dataFromBackend\r\n\r\n        if (userInfo && userInfo.token) {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${userInfo.token}`\r\n                }\r\n            }\r\n    \r\n            dataFromBackend = await axios.get(`/${userName}/api/pages/${id}/any`, config)\r\n        } else {\r\n            dataFromBackend = await axios.get(`/${userName}/api/pages/${id}`)\r\n        }\r\n\r\n        const { data } = dataFromBackend\r\n\r\n        dispatch({\r\n            type: PAGE_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PAGE_DETAILS_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const createNewPage = (userName, page) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PAGE_CREATE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(`/${userName}/api/pages/new`, page, config)\r\n\r\n        dispatch({\r\n            type: PAGE_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PAGE_CREATE_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deletePage = (userName, page) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PAGE_DELETE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        let dataFromBackend\r\n\r\n        if (userInfo && userInfo.token) {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${userInfo.token}`\r\n                }\r\n            }\r\n    \r\n            dataFromBackend = await axios.delete(`/${userName}/api/pages/delete/any`, {\r\n                ...config,\r\n                data: {\r\n                    ...page\r\n                }\r\n            })\r\n            dataFromBackend = await axios.delete(`/${userName}/api/pages/delete`, {\r\n                data: {\r\n                    ...page\r\n                }\r\n            })\r\n        }    \r\n\r\n        \r\n\r\n        dispatch({\r\n            type: PAGE_DELETE_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PAGE_DELETE_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updatePage = (userName, page) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PAGE_UPDATE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo } } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(`/${userName}/api/pages/edit`, page, config)\r\n\r\n        dispatch({\r\n            type: PAGE_UPDATE_SUCCESS,\r\n            payload: data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PAGE_UPDATE_FAIL,\r\n            payload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n        })\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Card, Button, Form } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport { deletePage } from '../actions/pageActions'\r\n\r\nconst getFileName = (fileLoc) => {\r\n    fileLoc = fileLoc.split(\"\").reverse()\r\n    let i;\r\n    for (i = 0; i < fileLoc.length; i++) {\r\n        const char = fileLoc[i];\r\n        if (char == '/') {\r\n            break;\r\n        }\r\n    }\r\n    fileLoc.length = i;\r\n    fileLoc.reverse();\r\n    fileLoc.join(\"\")\r\n    return fileLoc;\r\n}\r\n\r\nconst Page = ({ page, userName, history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deletePage(userName, page))\r\n        history.go(0)\r\n    }\r\n\r\n    const editHandler = () => {\r\n        history.push(`/${userName}/edit-page/${page._id}`)\r\n    }\r\n    return (\r\n        <LinkContainer to={`/${userName}/page/${page._id}`} style={{\r\n            display: 'grid',\r\n            gridTemplateRows: `\r\n                15% \r\n                auto \r\n                auto\r\n            `,\r\n            gridTemplateAreas:`\r\n                'name name name'\r\n                'text text text'\r\n                'files files files'\r\n            `,\r\n            columnGap: '10px',\r\n            rowGap: '10px',\r\n            cursor: 'pointer'\r\n        }}>\r\n            <Card className='my-3 p-3 rounded page'>\r\n                <Card.Title style={{gridArea: 'name'}} className='m-0'>{page.name}</Card.Title>\r\n                {page.text ?\r\n                    <Card.Text style={{gridArea: 'text'}}  className='m-0'>\r\n                        {page.text}\r\n                    </Card.Text>\r\n                    : page.text = ''\r\n                }\r\n                {page.files.map(file => (\r\n                        <Card.Text key={file} style={{gridArea: 'files'}}  className='m-0'>\r\n                            <a href={file} download>\r\n                                <Button variant=\"outline-dark\">\r\n                                    {getFileName(file)}\r\n                                </Button>\r\n                            </a>\r\n                        </Card.Text>\r\n                    ))\r\n                }\r\n            </Card>\r\n        </LinkContainer>\r\n    )\r\n}\r\n\r\nexport default Page\r\nexport {\r\n    getFileName\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, Button, Card } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Page from '../components/Page'\r\nimport { listPages } from '../actions/pageActions'\r\n\r\nconst PagesScreen = ({ match, history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const refresh = () => {\r\n        history.go(0)\r\n    }\r\n\r\n    const pageList = useSelector(state => state.pageList)\r\n    const { loading, error, pages } = pageList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        dispatch(listPages(match.params.userName))\r\n    }, [dispatch, userInfo])\r\n\r\n    const NewPageButton = () => {\r\n        return (\r\n            <>\r\n                <Card className='my-3 p-0 rounded'>\r\n                    <LinkContainer to={`/${match.params.userName}/new-page`}><Button variant='light' type=\"submit\" size='lg'><i className='fas fa-plus'></i></Button></LinkContainer>\r\n                </Card>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>{match.params.userName}'s pages:</h1>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : (\r\n                    <>\r\n                        <Row>\r\n                            {pages.map(page => (\r\n                                <Col sm={12} md={6} lg={4} xl={3} key={page.name}>\r\n                                    <Page page={page} userName={match.params.userName} history={history}/>\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        {userInfo && (\r\n                            <Row>\r\n                                <NewPageButton />\r\n                            </Row>\r\n                        )}\r\n                    </>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PagesScreen\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Card, Form, Button, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport { Switch } from 'evergreen-ui'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { createNewPage } from '../actions/pageActions'\r\n\r\nconst NewPageScreen = ({ match, history }) => {    \r\n    const [name, setName] = useState('' )\r\n    const [text, setText] = useState('')\r\n    const [files, setFiles] = useState([])\r\n    const [publicViewing, setPublicViewing] = useState(false)\r\n    const [isOneFactorAuthReqForViewing, setIsOneFactorAuthReqForViewing] = useState(false)\r\n    const [publicEditing, setPublicEditing] = useState(false)\r\n    const [publicEditingModalShown, setPublicEditingModalShown] = useState(false)\r\n    const [publicViewingModalShown, setPublicViewingModalShown] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const submitHandler = (e) => {\r\n        if (!name) {\r\n            setMessage('Name is required')\r\n        } else {\r\n            dispatch(createNewPage(match.params.userName, {\r\n                name,\r\n                text,\r\n                files,\r\n                publicViewing,\r\n                isOneFactorAuthReqForViewing,\r\n                publicEditing\r\n            }))\r\n            history.push(`/${match.params.userName}`)\r\n            history.go(0)\r\n        }\r\n    }\r\n\r\n    const PublicEditingModalCancel = () => {\r\n        setPublicEditingModalShown(false)\r\n        setPublicEditing(!publicEditing)\r\n    }\r\n\r\n    const PublicViewingModalCancel = () => {\r\n        setPublicViewingModalShown(false)\r\n        setPublicViewing(!publicViewing)\r\n    }\r\n\r\n    const toggleIsEditingPublic = () => {\r\n        setPublicEditing(!publicEditing)\r\n        if (!publicEditing) {\r\n            setPublicEditingModalShown(true)\r\n        }\r\n    }\r\n\r\n    const toggleIsViewingPublic = () => {\r\n        setPublicViewing(!publicViewing)\r\n        if (!publicViewing) {\r\n            setPublicViewingModalShown(true)\r\n        }\r\n    }\r\n\r\n\r\n    const PublicEditingModal = () => (\r\n        <>\r\n            <Modal show={publicEditingModalShown} onHide={PublicEditingModalCancel} centered>\r\n                <Modal.Header>\r\n                    <Modal.Title>Public Editing</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body className='p-4'>\r\n                    Please note that one factor authentication is required. \r\n                    In order to edit this page from an unauthorized computer, \r\n                    you will have to enter a code that will be sent to you via SMS or email\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"light\" onClick={PublicEditingModalCancel}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"dark\" onClick={() => setPublicEditingModalShown(false)}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n    const PublicViewingModal = () => (\r\n        <>\r\n            <Modal show={publicViewingModalShown} onHide={PublicViewingModalCancel} centered>\r\n                <Modal.Header>\r\n                    <Modal.Title>Public Viewing</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body className='p-4'>\r\n                    By setting viewing public, you can decide whether or not one factor authentication is required. \r\n                    <br/> \r\n                    What does that mean? \r\n                    When set to true, in order to view the note from an unauthorized computer you will have to enter a code that will be sent to you via SMS or email. \r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"light\" onClick={PublicViewingModalCancel}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"dark\" onClick={() => setPublicViewingModalShown(false)}>\r\n                        Okay\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            <LinkContainer to={`/${match.params.userName}`}>\r\n                <Button variant='light' className='p-0'>\r\n                    <Card className=\"p-3\">\r\n                        <i className='fas fa-arrow-left'></i>\r\n                    </Card>\r\n                </Button>\r\n            </LinkContainer>\r\n            <Card className=\"p-3\">\r\n                <Card.Title>\r\n                    Create a new page:\r\n                </Card.Title>\r\n                <Form>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>page name</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Enter name\" \r\n                            value={name} \r\n                            onChange={e => setName(e.target.value)} \r\n                            required\r\n                        />\r\n                    </Form.Group>\r\n                \r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>page text</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Enter text\" \r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Control \r\n                            type=\"file\" \r\n                            multiple \r\n                            value={files} \r\n                            onChange={e => setFiles(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Is viewing Public?</Form.Label>\r\n                        <Switch checked={publicViewing} onChange={toggleIsViewingPublic} />\r\n                    </Form.Group>\r\n\r\n                    {publicViewing &&\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>\r\n                                Is one factor authentication required for viewing this page?\r\n                                <OverlayTrigger overlay={\r\n                                    <Tooltip>\r\n                                        In order to view the note from an unauthorized computer you will have to enter a code that will be sent to you via SMS or email.\r\n                                    </Tooltip>\r\n                                }>\r\n                                    <i class=\"far fa-question-circle mx-1\"></i>\r\n                                </OverlayTrigger>\r\n                            </Form.Label>\r\n                            <Switch checked={isOneFactorAuthReqForViewing} onChange={() => setIsOneFactorAuthReqForViewing(!isOneFactorAuthReqForViewing)} />\r\n                        </Form.Group>\r\n                    }\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Is Editing Public?</Form.Label>\r\n                        <Switch checked={publicEditing} onChange={toggleIsEditingPublic} />\r\n                    </Form.Group>\r\n\r\n                    <LinkContainer to={`/${match.params.userName}`} disabled={!name || name.length < 1}>\r\n                        <Button variant=\"outline-dark\" type=\"submit\" onClick={submitHandler}>\r\n                            create!\r\n                        </Button>\r\n                    </LinkContainer>\r\n                </Form>\r\n            </Card>\r\n            <PublicEditingModal />\r\n            <PublicViewingModal />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewPageScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Card, Form, Button, Modal, OverlayTrigger, Tooltip, Container } from 'react-bootstrap'\r\nimport { Switch, Text } from 'evergreen-ui'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listPageDetails, deletePage, updatePage } from '../actions/pageActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getFileName } from '../components/Page'\r\n\r\nconst EditPageScreen = ({ match, history }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const pageDetails = useSelector(state => state.pageDetails)\r\n    const { loading, error, page } = pageDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [name, setName] = useState(page ? page.name : '')\r\n    const [text, setText] = useState(page ? page.text : '')\r\n    const [files, setFiles] = useState(page ? page.files : [])\r\n    const [publicViewing, setPublicViewing] = useState(page ? page.publicViewing : false)\r\n    const [publicEditing, setPublicEditing] = useState(page ? page.publicEditing : false)\r\n    const [isOneFactorAuthReqForViewing, setIsOneFactorAuthReqForViewing] = useState(false)\r\n    const [publicEditingModalShown, setPublicEditingModalShown] = useState(false)\r\n    const [publicViewingModalShown, setPublicViewingModalShown] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(listPageDetails(match.params.userName, match.params.id))\r\n    }, [match, dispatch, isEditing, userInfo])\r\n\r\n    useEffect(() => {\r\n        setName(page.name)\r\n        page.text ? setText(page.text) : setText('')\r\n        page.files ? setFiles(page.files) : setFiles([])\r\n        setPublicViewing(page.publicViewing)\r\n        setPublicEditing(page.publicEditing)\r\n        setIsOneFactorAuthReqForViewing(page.isOneFactorAuthReqForViewing)\r\n    }, [page])\r\n\r\n    const submitHandler = (name, text, files, publicViewing, publicEditing, isOneFactorAuthReqForViewing) => {\r\n        const newPage = {_id: page._id, name, text, files, publicViewing, publicEditing, isOneFactorAuthReqForViewing}\r\n\r\n        console.log(newPage)\r\n\r\n        setIsEditing(false)\r\n\r\n        dispatch(updatePage(match.params.userName, newPage))\r\n    }\r\n\r\n    const PublicEditingModalCancel = () => {\r\n        setPublicEditingModalShown(false)\r\n        setPublicEditing(!publicEditing)\r\n    }\r\n\r\n    const PublicViewingModalCancel = () => {\r\n        setPublicViewingModalShown(false)\r\n        setPublicViewing(!publicViewing)\r\n    }\r\n\r\n    const toggleIsEditingPublic = () => {\r\n        setPublicEditing(!publicEditing)\r\n        if (!publicEditing) {\r\n            setPublicEditingModalShown(true)\r\n        }\r\n    }\r\n\r\n    const toggleIsViewingPublic = () => {\r\n        setPublicViewing(!publicViewing)\r\n        if (!publicViewing) {\r\n            setPublicViewingModalShown(true)\r\n        }\r\n    }\r\n    \r\n    const toggleIsEditing = () => {\r\n        setIsEditing(!isEditing)\r\n    }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deletePage(match.params.userName, page))\r\n        history.push(`/${match.params.userName}`)\r\n        history.go(0)\r\n    }\r\n\r\n    const PublicEditingModal = () => (\r\n        <>\r\n            <Modal show={publicEditingModalShown} onHide={PublicEditingModalCancel} centered>\r\n                <Modal.Header>\r\n                    <Modal.Title>Public Editing</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body className='p-4'>\r\n                    Please note that one factor authentication is required. \r\n                    In order to edit this page from an unauthorized computer, \r\n                    you will have to enter a code that will be sent to you via SMS or email\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"light\" onClick={PublicEditingModalCancel}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"dark\" onClick={() => setPublicEditingModalShown(false)}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n    const PublicViewingModal = () => {\r\n        return (\r\n            <>\r\n            <Modal show={publicViewingModalShown} onHide={PublicViewingModalCancel} centered>\r\n                <Modal.Header>\r\n                    <Modal.Title>Public Viewing</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body className='p-4'>\r\n                    By setting viewing public, you can decide whether or not one factor authentication is required. \r\n                    <br/> \r\n                    What does that mean? \r\n                    When set to true, in order to view the note from an unauthorized computer you will have to enter a code that will be sent to you via SMS or email. \r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"light\" onClick={PublicViewingModalCancel}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"dark\" onClick={() => setPublicViewingModalShown(false)}>\r\n                        Okay\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LinkContainer to={`/${match.params.userName}`}>\r\n                <Button variant='light' className='p-0'>\r\n                    <Card className=\"p-3\">\r\n                        <i className='fas fa-arrow-left'></i>\r\n                    </Card>\r\n                </Button>\r\n            </LinkContainer>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : error ? (\r\n                <Message variant='danger'>{error}</Message>\r\n            ) : isEditing && (publicEditing || userInfo) ? (\r\n                <Card className=\"p-4\" style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: `\r\n                        25%\r\n                        25%\r\n                        25%\r\n                        25%\r\n                    `,\r\n                    gridTemplateAreas:`\r\n                        'title title title title'\r\n                        'name name name name'\r\n                        'text text text text'\r\n                        'files files files files'\r\n                        'viewing viewing viewing viewing'\r\n                        'factorAuth factorAuth editing editing'\r\n                        '. . . .'\r\n                        'edit edit delete delete'\r\n                        'submit submit submit submit'\r\n                    `,\r\n                    columnGap: '10px',\r\n                    rowGap: '10px',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'stretch',\r\n                    alignContent: 'stretch',\r\n                }}>\r\n                    <Card.Title style={{gridArea: 'title', textAlign: 'center'}}>\r\n                        Edit a page: \r\n                    </Card.Title>\r\n                    <Form.Group className=\"mb-3\" style={{gridArea: 'name'}}>\r\n                        <Form.Label>Enter Name: </Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Enter name\" \r\n                            value={name} \r\n                            onChange={e => setName(e.target.value)} \r\n                            required\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" style={{gridArea: 'text'}} key='text'>\r\n                        <Form.Label>page text</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\"\r\n                            as={'textarea'}\r\n                            placeholder=\"Enter text\" \r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                            style={{resize: 'none', height: '100px'}}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" style={{gridArea: 'files'}}>\r\n                        <Form.Control \r\n                            type=\"file\" \r\n                            multiple \r\n                            value={files} \r\n                            onChange={e => setFiles(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" style={{gridArea: 'viewing'}}>\r\n                        <Form.Label>Is viewing Public?</Form.Label>\r\n                        <Switch checked={publicViewing} onChange={toggleIsViewingPublic} />\r\n                    </Form.Group> \r\n                    {publicViewing &&\r\n                        <Form.Group className=\"mb-3\" style={{gridArea: 'factorAuth'}}>\r\n                            <Form.Label>\r\n                                Is one factor authentication required for viewing this page?\r\n                                <OverlayTrigger overlay={\r\n                                    <Tooltip>\r\n                                        In order to view the note from an unauthorized computer you will have to enter a code that will be sent to you via SMS or email.\r\n                                    </Tooltip>\r\n                                }>\r\n                                    <i class=\"far fa-question-circle mx-1\"></i>\r\n                                </OverlayTrigger>\r\n                            </Form.Label>\r\n                            <Switch checked={isOneFactorAuthReqForViewing} onChange={() => setIsOneFactorAuthReqForViewing(!isOneFactorAuthReqForViewing)} />\r\n                        </Form.Group>\r\n                    }\r\n                    {publicViewing && \r\n                        <Form.Group className=\"mb-3\" style={{gridArea: 'editing'}}>\r\n                            <Form.Label>Is Editing Public?</Form.Label>\r\n                            <Switch checked={publicEditing} onChange={toggleIsEditingPublic} />\r\n                        </Form.Group>\r\n                    }\r\n                    <Button variant=\"outline-success\" type=\"submit\" onClick={toggleIsEditing} className='p-2' style={{gridArea: 'edit'}}>\r\n                        <i className=\"fas fa-edit\"></i>\r\n                    </Button>\r\n                    <Button variant=\"outline-danger\" onClick={deleteHandler} style={{gridArea: 'delete'}} disabled={!(publicEditing || userInfo)}>\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </Button>\r\n                    <LinkContainer to={`/${match.params.userName}`} disabled={!name || name.length < 1} style={{gridArea: 'submit'}}>\r\n                        <Button variant=\"outline-dark\" type=\"submit\" onClick={e => {\r\n                            e.preventDefault()\r\n\r\n                            submitHandler(name, text, files, publicViewing, publicEditing, isOneFactorAuthReqForViewing)\r\n                        }}>\r\n                            Update!\r\n                        </Button>\r\n                    </LinkContainer>\r\n                </Card>\r\n            ) : (\r\n                <Card className=\"p-4\" style={{\r\n                    display: 'grid',\r\n                    gridTemplateRows: `\r\n                        15%\r\n                        auto\r\n                        auto\r\n                        15%\r\n                        15%\r\n                    `,\r\n                    gridTemplateAreas:`\r\n                        '. name name .'\r\n                        'text text text text'\r\n                        'files files files files'\r\n                        '. . . .'\r\n                        'edit edit delete delete'\r\n                        'submit submit submit submit'\r\n                    `,\r\n                    columnGap: '10px',\r\n                    rowGap: '10px',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'stretch',\r\n                    alignContent: 'stretch',\r\n                }}>\r\n                    <Card.Title style={{gridArea: 'name', textAlign: 'center'}}>\r\n                        {name}\r\n                    </Card.Title>\r\n                    <Form.Label style={{gridArea: 'text'}}>{text}</Form.Label>\r\n                    {files.map(file => (\r\n                        <Card.Text key={file} style={{gridArea: 'files'}}  className='m-0'>\r\n                            <a href={file} download>\r\n                                <Button variant=\"outline-dark\">\r\n                                    {getFileName(file)}\r\n                                </Button>\r\n                            </a>\r\n                        </Card.Text>\r\n                    ))}\r\n                    <Button variant=\"outline-success\" type=\"submit\" onClick={toggleIsEditing} className='p-2' disabled={!(publicEditing || userInfo)} style={{gridArea: 'edit'}}>\r\n                        <i className=\"fas fa-edit\"></i>\r\n                    </Button>\r\n                    <Button variant=\"outline-danger\" onClick={deleteHandler} style={{gridArea: 'delete'}} disabled={!(publicEditing || userInfo)}>\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </Button>\r\n                    <LinkContainer to={`/${match.params.userName}`} disabled={!name || name.length < 1} style={{gridArea: 'submit'}} disabled>\r\n                        <Button variant=\"outline-dark\" type=\"submit\" onClick={submitHandler}>\r\n                            Update!\r\n                        </Button>\r\n                    </LinkContainer>\r\n                </Card>\r\n            )}\r\n            <PublicEditingModal />\r\n            <PublicViewingModal />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditPageScreen\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Card, Form, Button, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\n\r\nconst ProfileScreen = ({ match, history }) => {\r\n    const [userName, setUserName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/')\r\n        } else {\r\n            if (!user || !user.userName) {\r\n                dispatch(getUserDetails(match.params.userName, 'profile'))\r\n            } else {\r\n                setUserName(user.userName)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [history, userInfo, dispatch, user])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password !== confirmPassword) {\r\n            setMessage('passwords do not match')\r\n        } else {\r\n            setMessage(null)\r\n            setPassword('')\r\n            setConfirmPassword('')\r\n            dispatch(updateUserProfile(userName, { id: user._id, userName, email, password}))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LinkContainer to={`/${match.params.userName}`}>\r\n                <Button variant='light' className='p-0'>\r\n                    <Card className=\"p-3\">\r\n                        <i className='fas fa-arrow-left'></i>\r\n                    </Card>\r\n                </Button>\r\n            </LinkContainer>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {success && <Message variant='success'>Profile Updated!</Message>}\r\n            {loading && <Loader />}\r\n            <Card className=\"p-3\">\r\n                <Card.Title>\r\n                    User Profile\r\n                </Card.Title>\r\n                <Form>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>User Name</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Enter user name\" \r\n                            value={userName} \r\n                            readOnly \r\n                        />\r\n                    </Form.Group>\r\n                \r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"Enter text\" \r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control \r\n                            type=\"password\" \r\n                            placeholder=\"Enter password\" \r\n                            value={password}\r\n                            onChange={e => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control \r\n                            type=\"password\" \r\n                            placeholder=\"Confirm password\" \r\n                            value={confirmPassword}\r\n                            onChange={e => setConfirmPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <LinkContainer to={`/${match.params.userName}`}>\r\n                        <Button variant=\"outline-dark\" type=\"submit\" onClick={submitHandler}>\r\n                            Update!\r\n                        </Button>\r\n                    </LinkContainer>\r\n                </Form>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n\r\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'react-bootstrap'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport HomeScreen from './screens/HomeScreen'\nimport PagesScreen from './screens/PagesScreen'\nimport NewPageScreen from './screens/NewPageScreen'\nimport PageScreen from './screens/PageScreen'\nimport ProfileScreen from './screens/ProfileScreen'\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <main className='py-3'>\n        <Container>\n          <Route path='/' component={HomeScreen} exact/>\n          <Route path='/:userName' component={PagesScreen} exact/>\n          <Route path='/:userName/new-page' component={NewPageScreen}/>\n          <Route path='/:userName/page/:id' component={PageScreen}/>\n          <Route path='/:userName/profile' component={ProfileScreen}/>\n        </Container>\n      </main>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}